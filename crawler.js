// Generated by CoffeeScript 1.4.0
(function() {
  var GelbooruCrawler, conf, fs, http, path, test, url, util, _,
    __slice = [].slice;

  _ = require("underscore");

  util = require("util");

  path = require("path");

  fs = require("fs");

  http = require("http");

  url = require("url");

  require("colors");

  GelbooruCrawler = (function() {

    function GelbooruCrawler(query, config) {
      this.baseUrl = config.baseUrl;
      this.maxWorkers = config.maxWorkers || 5;
      this.maxDownloads = config.maxDownloads || 4;
      this.renameFiles = config.renameFiles || true;
      this.query = query || "";
    }

    GelbooruCrawler.prototype.baseUrl = null;

    GelbooruCrawler.prototype.browseUrl = "/index.php?page=post&s=list";

    GelbooruCrawler.prototype.viewUrl = "/index.php?page=post&s=view&id=";

    GelbooruCrawler.prototype.searchUrlBase = null;

    GelbooruCrawler.prototype.crawledImages = [];

    GelbooruCrawler.prototype.resolveQueue = [];

    GelbooruCrawler.prototype.downloadQueue = [];

    GelbooruCrawler.prototype.downloads = [];

    GelbooruCrawler.prototype.workers = {};

    GelbooruCrawler.prototype.query = null;

    GelbooruCrawler.prototype.galleryName = null;

    GelbooruCrawler.prototype.pageId = null;

    GelbooruCrawler.prototype.running = false;

    GelbooruCrawler.prototype.crawling = false;

    GelbooruCrawler.prototype.downloadPath = null;

    GelbooruCrawler.prototype.totalFiles = 0;

    GelbooruCrawler.prototype.crawls = 0;

    GelbooruCrawler.prototype.workerColors = ['yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta'];

    GelbooruCrawler.prototype.imageIdRegExp = /index\.php\?page=post&amp;s=view&amp;id=(\d+)/ig;

    GelbooruCrawler.prototype.imageUrlRegExp = /http:\/\/cdn\d+.*(\/?images\/\d+\/[a-f0-9]+\.(jpe?g|png|gif))/ig;

    GelbooruCrawler.prototype.log = function() {
      var bold, col, colId, message, msg, mymsg, out, worker, _i, _j, _len, _len1;
      worker = arguments[0], message = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if ((worker != null) && worker > -1) {
        col = worker % (this.workerColors.length * 2);
        colId = col % this.workerColors.length;
        if (col > this.workerColors.length) {
          bold = true;
        }
        out = [];
        for (_i = 0, _len = message.length; _i < _len; _i++) {
          mymsg = message[_i];
          if (bold != null) {
            mymsg = mymsg.bold;
          }
          out.push(("[Worker #" + (worker.toString()) + "]")[this.workerColors[colId]].bold + " " + mymsg[this.workerColors[colId]]);
        }
        return console.log.apply(null, out);
      } else {
        out = [];
        for (_j = 0, _len1 = message.length; _j < _len1; _j++) {
          msg = message[_j];
          out.push("[>--INFO--<] " + msg.grey);
        }
        return console.log.apply(null, out);
      }
    };

    GelbooruCrawler.prototype.search = function() {
      var negative, positive, tag, tags, _fn, _i, _len,
        _this = this;
      tags = this.query.split(/\s+/);
      positive = [];
      negative = [];
      _fn = function(tag) {
        return (tag.charAt(0) === "-" ? negative : positive).push(tag.replace(/\-/g, "not-").replace(/_/g, "-").replace(/[^a-z0-9\-\.]/gi, ""));
      };
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        tag = tags[_i];
        _fn(tag);
      }
      this.galleryName = positive.join(".") + ".(" + negative.join(".") + ")";
      this.createPath();
      this.searchUrlBase = "" + this.browseUrl + "&tags=" + (escape(this.query)) + "&pid=";
      this.pageId = 0;
      this.running = true;
      this.crawling = true;
      this.log(null, "BaseURL: " + this.baseUrl);
      this.log(null, "Search: " + this.query);
      this.log(null, " -> include: " + (positive.join(", ")));
      this.log(null, " -> exclude: " + (negative.join(", ")));
      this.log(null, "Gallery Name: " + this.galleryName);
      this.log(null, "Starting crawler ... max. " + this.maxWorkers + " requests");
      return process.nextTick(function() {
        return _this.crawl.call(_this);
      });
    };

    GelbooruCrawler.prototype.crawl = function() {
      var imageId, _results,
        _this = this;
      _results = [];
      while (Object.keys(this.workers).length < this.maxWorkers) {
        this.crawls++;
        if (this.crawling && !this.resolveQueue.length) {
          this.spawnWorker(this.searchUrlBase + this.pageId, this.scanPage);
          this.pageId += 28;
        } else if (this.resolveQueue.length) {
          imageId = this.resolveQueue.pop();
          this.resolveImageId(imageId);
        } else {
          this.storeDownloadList(function() {
            return _this.getDownload.call(_this);
          });
        }
        _results.push(this.log(null, "Pass: " + this.crawls + " Threads: " + this.workers.length + "/" + this.maxWorkers + "       Found: " + this.crawledImages.length + " images"));
      }
      return _results;
    };

    GelbooruCrawler.prototype.getDownload = function() {
      var fileData, id, viewLink, _ref, _results;
      if ((_ref = this.downloadQueue) == null) {
        this.downloadQueue = _.clone(this.crawledImages);
      }
      _results = [];
      while (this.downloads.length < this.maxDownloads && this.downloadQueue.length) {
        fileData = this.downloadQueue.pop();
        url = fileData[0], id = fileData[1], viewLink = fileData[2];
        _results.push(console.log("[" + id + "] " + viewLink + " image-url = '" + url + "'"));
      }
      return _results;
    };

    GelbooruCrawler.prototype.downloadFile = function(uri) {
      var filename;
      return filename = this.downloadPath + "/" + path.basename(uri, true);
    };

    GelbooruCrawler.prototype.spawnWorker = function(uri, callback) {
      var request, requestUrl, wid,
        _this = this;
      requestUrl = uri;
      wid = this.crawls;
      request = url.parse(this.baseUrl + requestUrl);
      request.agent = false;
      this.log(wid, "Requesting: " + this.baseUrl.grey + requestUrl);
      this.workers[wid] = http.request(request, function(response) {
        return _this.workerResponse.call(_this, _this.workers[wid], requestUrl, response, callback);
      });
      this.workers[wid].__workerId = wid;
      this.workers[wid].once("error", function(err) {
        _this.log(wid, "Error: " + err.toString().red.bold);
        return _this.endWorker.call(_this, wid);
      });
      this.workers[wid].once("close", function() {
        _this.log(wid, "Finished: " + _this.baseUrl.grey + requestUrl);
        return _this.endWorker.call(_this, wid);
      });
      return this.workers[wid].end();
    };

    GelbooruCrawler.prototype.workerResponse = function(worker, uri, res, callback) {
      var htmlBody, wid,
        _this = this;
      wid = worker.__workerId;
      this.log(wid, "Response: " + this.baseUrl.grey + uri);
      htmlBody = "";
      res.on("data", function(data) {
        return htmlBody += data;
      });
      res.once("end", function() {
        _this.log(wid, "Processing data: " + _this.baseUrl.grey + uri);
        return callback.call(_this, worker, htmlBody);
      });
      return res.once("error", function(err) {
        _this.log(wid, "Error: " + err.toString().red.bold);
        return _this.endWorker.call(_this, wid);
      });
    };

    GelbooruCrawler.prototype.endWorker = function(worker) {
      var wid,
        _this = this;
      wid = worker.__workerId;
      if ((wid != null) && this.workers[wid]) {
        this.workers.splice(wid, 1);
        this.log(wid, "Worker terminated without errors.");
      }
      return process.nextTick(function() {
        return _this.crawl.call(_this);
      });
    };

    GelbooruCrawler.prototype.scanPage = function(worker, html) {
      var didMatch, image, wid;
      didMatch = [];
      wid = worker.__workerId;
      while (image = this.imageIdRegExp.exec(html)) {
        didMatch.push(image[1]);
        this.resolveQueue.push(image[1]);
      }
      if (!didMatch.length) {
        this.log(wid, "No images found. This was the last page. Stopping the crawler!");
        return this.crawling = false;
      } else {
        return this.log(wid, "Found " + didMatch.length + " images, " + this.resolveQueue.length + " in queue and " + this.crawledImages.length + " resolved");
      }
    };

    GelbooruCrawler.prototype.storeDownloadList = function(callback) {
      var _this = this;
      this.log(null, "", "", "Storing Download List to file " + this.downloadPath + "/gallery.json");
      return fs.writeFile("" + this.downloadPath + "/gallery.json", JSON.stringify(this.crawledImages, null, "  "), function(err) {
        if (err != null) {
          throw err;
        }
        _this.log(null, "Download List stored to " + _this.downloadPath + "/gallery.json");
        if (typeof callback === "function") {
          return callback.call(_this);
        }
      });
    };

    GelbooruCrawler.prototype.resolveImageId = function(id) {
      var _this = this;
      return this.spawnWorker(this.viewUrl + id, function(worker, html) {
        var image, _results;
        _results = [];
        while (image = _this.imageUrlRegExp.exec(html)) {
          if (_this.crawledImages.indexOf(image[0]) === -1) {
            _this.crawledImages.push([image[0], id, _this.viewUrl + id]);
          } else {
            _this.log(worker.__workerId, ("Duplicate for #" + id + "/" + image[0] + " ?!").red.bold);
          }
          break;
        }
        return _results;
      });
    };

    GelbooruCrawler.prototype.createPath = function() {
      var date, dateLevel, dlPath, _fn, _i, _len,
        _this = this;
      date = new Date();
      this.downloadPath = __dirname;
      dateLevel = [date.getFullYear(), date.getMonth() + 1, date.getDate()];
      _fn = function(dlPath) {
        _this.downloadPath += "/" + dlPath;
        if (!fs.existsSync(_this.downloadPath)) {
          return fs.mkdir(_this.downloadPath, "0755");
        }
      };
      for (_i = 0, _len = dateLevel.length; _i < _len; _i++) {
        dlPath = dateLevel[_i];
        _fn(dlPath);
      }
      this.downloadPath += "/" + this.galleryName;
      if (!fs.existsSync(this.downloadPath)) {
        fs.mkdir(this.downloadPath, "0755");
      }
      return this.log(null, ("Created: " + this.downloadPath).italic);
    };

    return GelbooruCrawler;

  })();

  conf = {
    baseUrl: "http://gelbooru.com",
    maxDownloads: 6,
    maxWorkers: 10,
    renameFiles: true
  };

  test = new GelbooruCrawler("no_bra no_pants -huge* -large* -penis -*boy*", conf);

  test.search();

}).call(this);
